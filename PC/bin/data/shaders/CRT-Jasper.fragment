#if __VERSION__ >= 140
// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 vertColor;
// Ouput data
out vec4 fragColor;
#else
varying vec2 UV;
varying vec4 vertColor;
#endif

// Values that stay constant for the whole mesh.
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

uniform vec2 iResolution;
uniform float iGlobalTime;

// Hardness of scanline.
//  -8.0 = soft
// -16.0 = medium
float hardScan=-6.0;

// Hardness of pixels in scanline.
// -2.0 = soft
// -4.0 = hard
float hardPix=-2.0;

// Display warp.
// 0.0 = none
// 1.0/8.0 = extreme
vec2 warp = vec2(1.0/32.0, 1.0/24.0); 

// Amount of shadow mask.
float maskDark=0.5;
float maskLight=1.5;

//------------------------------------------------------------------------
// sRGB to Linear.
// Assuing using sRGB typed textures this should not be needed.
float ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}
vec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}

// Linear to sRGB.
// Assuing using sRGB typed textures this should not be needed.
float ToSrgb1(float c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}
vec3 ToSrgb(vec3 c){return vec3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}

// Nearest emulated sample given floating point position and texel offset.
// Also zero's off screen.
vec3 Fetch(vec2 pos,vec2 off){
  vec3 result;
  pos = (floor( pos*iResolution + off) + vec2(0.5,0.5))/iResolution;
#if __VERSION__ >= 140
  //result = ToLinear(1.2 * texture(iChannel0 , pos.xy, -16.0).rgb);
  result.r = texture(iChannel0, vec2(pos.x - 0.004 * sin(iGlobalTime), pos.y)).r;
  result.g = texture(iChannel0, vec2(pos.x                           , pos.y)).g;
  result.b = texture(iChannel0, vec2(pos.x + 0.004 * cos(iGlobalTime), pos.y)).b;
#else
  //result = ToLinear(1.2 * texture2D(iChannel0 , pos.xy, -16.0).rgb);
  result.r = texture2D(tex, vec2(pos.x - 0.004 * sin(iGlobalTime), pos.y)).r;
  result.g = texture2D(tex, vec2(pos.x                           , pos.y)).g;
  result.b = texture2D(tex, vec2(pos.x + 0.004 * cos(iGlobalTime), pos.y)).b;
#endif
  //result = ToLinear(1.2 * result);
  return result;
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){pos=pos*iResolution;return -((pos-floor(pos))-vec2(0.5));}
    
// 1D Gaussian.
float Gaus(float pos,float scale){return exp2(scale*pos*pos);}

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos,float off){
  vec3 b=Fetch(pos,vec2(-1.0,off));
  vec3 c=Fetch(pos,vec2( 0.0,off));
  vec3 d=Fetch(pos,vec2( 1.0,off));
  float dst=Dist(pos).x;
  // Convert distance to weight.
  float scale=hardPix;
  float wb=Gaus(dst-1.0,scale);
  float wc=Gaus(dst+0.0,scale);
  float wd=Gaus(dst+1.0,scale);
  // Return filtered sample.
  return (b*wb+c*wc+d*wd)/(wb+wc+wd);
}

// 5-tap Gaussian filter along horz line.
vec3 Horz5(vec2 pos,float off){
  vec3 a=Fetch(pos,vec2(-2.0,off));
  vec3 b=Fetch(pos,vec2(-1.0,off));
  vec3 c=Fetch(pos,vec2( 0.0,off));
  vec3 d=Fetch(pos,vec2( 1.0,off));
  vec3 e=Fetch(pos,vec2( 2.0,off));
  float dst=Dist(pos).x;
  // Convert distance to weight.
  float scale=hardPix;
  float wa=Gaus(dst-2.0,scale);
  float wb=Gaus(dst-1.0,scale);
  float wc=Gaus(dst+0.0,scale);
  float wd=Gaus(dst+1.0,scale);
  float we=Gaus(dst+2.0,scale);
  // Return filtered sample.
  return (a*wa+b*wb+c*wc+d*wd+e*we)/(wa+wb+wc+wd+we);
}

// Return scanline weight.
float Scan(vec2 pos,float off){
  float dst=Dist(pos).y;
  return Gaus(dst+off,hardScan);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos){
  vec3 a=Horz3(pos,-1.0);
  vec3 b=Horz5(pos, 0.0);
  vec3 c=Horz3(pos, 1.0);
  float wa=Scan(pos,-1.0);
  float wb=Scan(pos, 0.0);
  float wc=Scan(pos, 1.0);
  return a*wa + b*wb + c*wc;
}

// Distortion of scanlines, and end of screen alpha.
vec2 Warp(vec2 pos){
  pos = pos*2.0-1.0;    
  pos *= vec2(1.0+(pos.y*pos.y)*warp.x,1.0+(pos.x*pos.x)*warp.y);
  return pos*0.5+0.5;
}

// Shadow mask.
vec3 Mask(vec2 pos) {
  pos.x+=pos.y*3.0;
  vec3 mask=vec3(maskDark,maskDark,maskDark);
  pos.x=fract(pos.x/6.0);
  if(pos.x<0.333)mask.r=maskLight;
  else if(pos.x<0.666)mask.g=maskLight;
  else mask.b=maskLight;
  return mask;
}

vec3 scanline(vec2 coord, vec3 screen) {
	screen.rgb -= sin((coord.y + (iGlobalTime * 29.0))) * 0.02;
	return screen;
}

float noise(vec2 p) {
	float smp;
	smp = texture2D(iChannel1,vec2(p.x,2.*cos(iGlobalTime))*mod(iGlobalTime/1000.0,1.0)*8. + p*1.).x;
	smp *= smp;
	return smp;
}

float onOff(float a, float b, float c) {
	return step(c, sin(iGlobalTime + a*cos(iGlobalTime*b)));
}

float ramp(float y, float start, float end) {
	float inside = step(start,y) - step(end,y);
	float fact = (y-start)/(end-start)*inside;
	return (1.-fact) * inside;	
}

float stripes(vec2 uv) {	
	float noi = noise(uv*vec2(0.5,1.) + vec2(1.,3.));
	return ramp(mod(uv.y*4. + iGlobalTime/2.+sin(iGlobalTime + sin(iGlobalTime*0.63)),1.),0.5,0.6)*noi;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 crtCoords = Warp(fragCoord);

	// shadertoy has tiling textures. wouldn't be needed
	// if you set up your tex params properly
	if (crtCoords.x < 0.0 || crtCoords.x > 1.0 || crtCoords.y < 0.0 || crtCoords.y > 1.0) {
		fragColor.rgb = vec3(0.0,0.0,0.0);
	}
	else {
		// Split the color channels
		fragColor.rgb = Tri(crtCoords); // * Mask(gl_FragCoord.xy); // sampleSplit(iChannel0, crtCoords); 

		// HACK: this bend produces a shitty moire pattern.
		// Up the bend for the scanline
		//vec2 screenSpace = crtCoords * iResolution.xy;
		//fragColor.rgb = scanline(screenSpace, fragColor.rgb);
	}
	//fragColor.a = 1;
	
	float vigAmt = 4.+.3*sin(iGlobalTime + 5.*cos(iGlobalTime*5.));
	float vignette = (1.-vigAmt*(fragCoord.y-.5)*(fragCoord.y-.5))*(1.-vigAmt*(fragCoord.x-.5)*(fragCoord.x-.5));

	fragColor += 0.2 * stripes(fragCoord);
	fragColor += 0.2 * noise(2.0 * fragCoord);
	fragColor *= vignette;
	fragColor *= (12. + mod(fragCoord.y*30. + iGlobalTime, 1.))/13.;
	fragColor = vec4(fragColor.rgb,1.0);

}

void main() {
	vec4 result;
	mainImage(result, UV);
#if __VERSION__ >= 140
    fragColor = result;
#else
    gl_FragColor = result;
#endif
}
