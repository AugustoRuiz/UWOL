#if __VERSION__ >= 140
// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 vertColor;
// Ouput data
out vec4 fragColor;
#else
varying vec2 UV;
varying vec4 vertColor;
#endif

// Values that stay constant for the whole mesh.
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

uniform vec2 iResolution;
uniform float iGlobalTime;

vec2 warp = vec2(1.0/32.0, 1.0/24.0); 

// Amount of shadow mask.
float maskDark=0.5;
float maskLight=1.5;

// Distortion of scanlines, and end of screen alpha.
vec2 Warp(vec2 pos){
  pos = pos*2.0-1.0;    
  pos *= vec2(1.0+(pos.y*pos.y)*warp.x,1.0+(pos.x*pos.x)*warp.y);
  return pos*0.5+0.5;
}

// Shadow mask.
vec3 Mask(vec2 pos) {
  pos.x+=pos.y*3.0;
  vec3 mask=vec3(maskDark,maskDark,maskDark);
  pos.x=fract(pos.x/6.0);
  if(pos.x<0.333)mask.r=maskLight;
  else if(pos.x<0.666)mask.g=maskLight;
  else mask.b=maskLight;
  return mask;
}

vec3 scanline(vec2 coord, vec3 screen) {
	screen.rgb -= sin((coord.y + (iGlobalTime * 29.0))) * 0.02;
	return screen;
}

vec3 sampleSplit(sampler2D tex, vec2 coord) {
	vec3 frag;
	frag.r = texture2D(tex, vec2(coord.x - 0.004 * sin(iGlobalTime), coord.y)).r;
	frag.g = texture2D(tex, vec2(coord.x                            , coord.y)).g;
	frag.b = texture2D(tex, vec2(coord.x + 0.004 * sin(iGlobalTime), coord.y)).b;
	return frag;
}

float noise(vec2 p) {
	float smp;
	smp = texture2D(iChannel1,vec2(p.x,2.*cos(iGlobalTime))*iGlobalTime*8. + p*1.).x;
	smp *= smp;
	return smp;
}

float onOff(float a, float b, float c) {
	return step(c, sin(iGlobalTime + a*cos(iGlobalTime*b)));
}

float ramp(float y, float start, float end) {
	float inside = step(start,y) - step(end,y);
	float fact = (y-start)/(end-start)*inside;
	return (1.-fact) * inside;	
}

float stripes(vec2 uv) {	
	float noi = noise(uv*vec2(0.5,1.) + vec2(1.,3.));
	return ramp(mod(uv.y*4. + iGlobalTime/2.+sin(iGlobalTime + sin(iGlobalTime*0.63)),1.),0.5,0.6)*noi;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 crtCoords = Warp(fragCoord);

	// shadertoy has tiling textures. wouldn't be needed
	// if you set up your tex params properly
	if (crtCoords.x < 0.0 || crtCoords.x > 1.0 || crtCoords.y < 0.0 || crtCoords.y > 1.0) {
		fragColor.rgb = vec3(0.0,0.0,0.0);
	}
	else {
		// Split the color channels
		fragColor.rgb = sampleSplit(iChannel0, crtCoords); // * Mask(gl_FragCoord.xy);;

		// HACK: this bend produces a shitty moire pattern.
		// Up the bend for the scanline
		vec2 screenSpace = crtCoords * iResolution.xy;
		fragColor.rgb = scanline(screenSpace, fragColor.rgb);
	}
	fragColor.a = 1;
	
	float vigAmt = 3.+.3*sin(iGlobalTime + 5.*cos(iGlobalTime*5.));
	float vignette = (1.-vigAmt*(fragCoord.y-.5)*(fragCoord.y-.5))*(1.-vigAmt*(fragCoord.x-.5)*(fragCoord.x-.5));

	fragColor += 0.2 * stripes(fragCoord);
	fragColor += 0.2 * noise(2.0 * fragCoord);
	fragColor *= vignette;
	fragColor *= (12. + mod(fragCoord.y*30. + iGlobalTime, 1.))/13.;
}

void main() {
	vec4 result;
	mainImage(result, UV);
#if __VERSION__ >= 140
    fragColor = result;
#else
    gl_FragColor = result;
#endif
}
