#if __VERSION__ >= 140
// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 vertColor;
// Ouput data
out vec4 fragColor;
#else
// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec4 vertColor;
#endif

// Values that stay constant for the whole mesh.
uniform sampler2D iChannel0;
uniform float iGlobalTime;
uniform vec2 iResolution;

// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
#define PIXELSIZE 1.0

vec3 scanline(vec2 coord, vec3 screen) {
	screen.rgb -= sin((coord.y + (iGlobalTime * 29.0))) * 0.05;
	return screen;
}

vec2 crt(vec2 coord, float bend) {
	// put in symmetrical coords
	coord = (coord - 0.5) * 2.0;

	coord *= 1.1;	

	// deform coords
	coord.x *= 1.0 + pow((abs(coord.y) / bend), 2.0);
	coord.y *= 1.0 + pow((abs(coord.x) / bend), 2.0);

	// transform back to 0.0 - 1.0 space
	coord  = (coord / 2.0) + 0.5;

	return coord;
}

void main( ) {
	vec4 color;
	
	vec2 cor;
	cor.x = iResolution.x * UV.x / PIXELSIZE;
	cor.y = iResolution.y * (UV.y + PIXELSIZE * 1.5 * mod(floor(cor.x),2.0)) / (PIXELSIZE * 3.0);
	
	vec2 ico = floor( cor );
	vec2 fco = fract( cor );
	
    vec2 coord = PIXELSIZE * ico * vec2(1.0,3.0) / iResolution.xy;
    vec2 crtCoords = crt(coord, 4.0);

    // shadertoy has tiling textures. wouldn't be needed
	// if you set up your tex params properly 
    if (crtCoords.x < 0.0 || crtCoords.x > 1.0 || crtCoords.y < 0.0 || crtCoords.y > 1.0) {
		color = vec4(0.0, 0.0, 0.0, 1.0);		
    } else {
        vec3 pix = step( 1.5, mod( vec3(0.0,1.0,2.0) + ico.x, 3.0 ) );
#if __VERSION__ >= 140
        vec3 ima = texture( iChannel0, crtCoords).xyz;
#else
        vec3 ima = texture2D( iChannel0, crtCoords).xyz;
#endif
        vec3 col = pix*dot( pix, ima );

        col *= step( abs(fco.x-0.5), 0.4 );
        col *= step( abs(fco.y-0.5), 0.4 );

        col *= 1.2;
        color = vec4( col, 1.0 );
		
        vec2 screenSpace = crtCoords * iResolution.xy;
        color.rgb = scanline(screenSpace, color.rgb);
	}

#if __VERSION__ >= 140
	fragColor = color;
#else
	gl_FragColor = color;
#endif
}
